local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Etherbyte Hub | Arsenal",
    LoadingTitle = "Etherbyte Hub",
    LoadingSubtitle = "by calgl#0001",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "EtherbyteHubConfigs",
        FileName = "ArsenalConfig"
    },
    Discord = {
        Enabled = false,
        Invite = "", -- Add your invite here
        RememberJoins = false
    },
    KeySystem = false, -- Set to true if using a key system
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458) -- Replace with desired icon ID

local hitboxEnabled = false
local noCollisionEnabled = false
local hitbox_original_properties = {}
local hitboxSize = 21
local hitboxTransparency = 6
local teamCheck = "FFA" 

local defaultBodyParts = {
    "UpperTorso",
    "Head",
    "HumanoidRootPart"
}


local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ScreenGui = Instance.new("ScreenGui", LocalPlayer.PlayerGui)
local WarningText = Instance.new("TextLabel", ScreenGui)

-- -------------------------------------
-- Utility Functions
-- -------------------------------------
local function savedPart(player, part)
    if not hitbox_original_properties[player] then
        hitbox_original_properties[player] = {}
    end
    if not hitbox_original_properties[player][part.Name] then
        hitbox_original_properties[player][part.Name] = {
            CanCollide = part.CanCollide,
            Transparency = part.Transparency,
            Size = part.Size
        }
    end
end


local function restoredPart(player)
    if hitbox_original_properties[player] then
        for partName, properties in pairs(hitbox_original_properties[player]) do
            local part = player.Character and player.Character:FindFirstChild(partName)
            if part and part:IsA("BasePart") then
                part.CanCollide = properties.CanCollide
                part.Transparency = properties.Transparency
                part.Size = properties.Size
            end
        end
    end
end

local function findClosestPart(player, partName)
    if not player.Character then return nil end
    local characterParts = player.Character:GetChildren()
    for _, part in ipairs(characterParts) do
        if part:IsA("BasePart") and part.Name:lower():match(partName:lower()) then
            return part
        end
    end
    return nil
end


-- -------------------------------------
-- Hitbox Functions
-- -------------------------------------
local function extendHitbox(player)
    for _, partName in ipairs(defaultBodyParts) do
        local part = player.Character and (player.Character:FindFirstChild(partName) or findClosestPart(player, partName))
        if part and part:IsA("BasePart") then
            savedPart(player, part)
            part.CanCollide = not noCollisionEnabled
            part.Transparency = hitboxTransparency / 10
            part.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
        end
    end
end

local function isEnemy(player)
    if teamCheck == "FFA" or teamCheck == "Everyone" then
        return true
    end
    local localPlayerTeam = LocalPlayer.Team
    return player.Team ~= localPlayerTeam
end

local function shouldExtendHitbox(player)
    return isEnemy(player)
end

local function updateHitboxes()
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            if shouldExtendHitbox(v) then
                extendHitbox(v)
            else
                restoredPart(v)
            end
        end
    end
end


-- -------------------------------------
-- Event Handlers
-- -------------------------------------
local function onCharacterAdded(character)
    task.wait(0.1)
    if hitboxEnabled then
        updateHitboxes()
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(onCharacterAdded)
    player.CharacterRemoving:Connect(function()
        restoredPart(player)
        hitbox_original_properties[player] = nil
    end)
end

local function checkForDeadPlayers()
    for player, properties in pairs(hitbox_original_properties) do
        if not player.Parent or not player.Character or not player.Character:IsDescendantOf(game) then
            restoredPart(player)
            hitbox_original_properties[player] = nil
        end
    end
end

Players.PlayerAdded:Connect(onPlayerAdded)

for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

local Button = MainTab:CreateButton({
   Name = "Enable hitbox",
   Callback = function()
       coroutine.wrap(function()
           while true do
               if hitboxEnabled then
                   updateHitboxes()
                   checkForDeadPlayers()
               end
               task.wait(0.1)
           end
       end)()  
   end,
})


MainTab:CreateToggle({
    Name = "Enable hit box",
    CurrentValue = false,
    Callback = function(Value)
        hitboxEnabled = Value
        if not Value then  
            for _, player in ipairs(Players:GetPlayers()) do
                restoredPart(player)
            end
            hitbox_original_properties = {}
        else
            updateHitboxes()
        end
    end    
})







MainTab:CreateToggle({
    Name = "auto farm",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().AutoFarm = Value

        local runServiceConnection
        local mouseDown = false
        local player = game.Players.LocalPlayer
        local camera = game.Workspace.CurrentCamera

        -- Use Value instead of bool
        game:GetService("ReplicatedStorage").wkspc.CurrentCurse.Value = Value and "Infinite Ammo" or ""

        function getClosestEnemyPlayer()
            local closestDistance = math.huge
            local closestPlayer = nil

            for _, enemyPlayer in pairs(game.Players:GetPlayers()) do
                if enemyPlayer ~= player and enemyPlayer.TeamColor ~= player.TeamColor and enemyPlayer.Character then
                    local character = enemyPlayer.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoidRootPart and humanoid and humanoid.Health > 0 then
                        local distance = (player.Character.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                        if distance < closestDistance and humanoidRootPart.Position.Y >= 0 then
                            closestDistance = distance
                            closestPlayer = enemyPlayer
                        end
                    end
                end
            end

            return closestPlayer
        end

        local function startAutoFarm()
            game:GetService("ReplicatedStorage").wkspc.TimeScale.Value = 12

            runServiceConnection = game:GetService("RunService").Stepped:Connect(function()
                if getgenv().AutoFarm then
                    local closestPlayer = getClosestEnemyPlayer()
                    if closestPlayer then
                        local targetPosition = closestPlayer.Character.HumanoidRootPart.Position + Vector3.new(0, 0, -4)
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            player.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                            camera.CFrame = CFrame.new(camera.CFrame.Position, closestPlayer.Character.Head.Position)

                            if not mouseDown then
                                mouse1press()  -- Ensure this function is defined
                                mouseDown = true
                            end
                        end
                    else
                        if mouseDown then
                            mouse1release()  -- Ensure this function is defined
                            mouseDown = false
                        end
                    end
                else
                    if runServiceConnection then
                        runServiceConnection:Disconnect()
                        runServiceConnection = nil
                    end
                    if mouseDown then
                        mouse1release()  -- Ensure this function is defined
                        mouseDown = false
                    end
                end
            end)
        end

        local function onCharacterAdded(character)
            wait(0.5)
            startAutoFarm()
        end

        player.CharacterAdded:Connect(onCharacterAdded)

        if Value then
            wait(0.5)
            startAutoFarm()
        else
            game:GetService("ReplicatedStorage").wkspc.CurrentCurse.Value = ""
            getgenv().AutoFarm = false
            game:GetService("ReplicatedStorage").wkspc.TimeScale.Value = 1
            if runServiceConnection then
                runServiceConnection:Disconnect()
                runServiceConnection = nil
            end
            if mouseDown then
                mouse1release()  -- Ensure this function is defined
                mouseDown = false
            end
        end
    end    
})
